#!/usr/bin/env perl
use warnings;
use strict;
#
# Take a simple font input file and generate c code
#

use Getopt::Long 2.33 qw(:config gnu_getopt no_auto_abbrev);

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Quotekeys = 0;

my $option = {
    output => 'h',
    debug  => 0,
};
GetOptions($option,
    "output|o=s",
    "debug",
);

my $db;
my $state;

while(<>) {
    chomp;
    
    s/^#.*//;
    s/([^\\])#.*//;
    s/^\s*//;    
    s/\s*$//;    

    if (m/^s\s*'\\?(.)'$/) {
        $state = undef;
        $state->{char}=ord($1);
        next;
    }

    if (m/^nogap$/) {
        $state->{nogap} = 1;
    }

    if (m/[x.]+/) {
        y/x./10/;
        push @{$state->{rows}},$_;
        next;
    }

    if (m/^e$/) {
        my $charid;
        if (defined($state->{char})) {
            $charid = $state->{char};
        } else {
            $charid = 0;
        }
        my $rows = scalar(@{$state->{rows}});
        my $cols = length($state->{rows}[0]);
        # sanity
        if($rows>8) {
            die("Too many rows");
        }

        if (defined($state->{nogap})) {
            $db->{data}[$charid]{nogap} = $state->{nogap};
        } else {
            $db->{data}[$charid]{nogap} = 0;
        }
        $db->{data}[$charid]{width} = $cols;
        for my $col (0..$cols-1) {
            my $coldata='';
            for my $row (0..$rows-1) {
                my $rowdata = $state->{rows}[$row];
                my $pixel;
                if (length($rowdata)>$col) {
                    $pixel = substr($rowdata,$col,1);
                }
                if (!defined($pixel) || ($pixel ne '1')) {
                    $pixel = '0';
                }
                $coldata = $pixel . $coldata;
            }
            $db->{data}[$charid]{cols}[$col] = $coldata;
        }
        $db->{data}[$charid]{rows} = $state->{rows};
        $state = undef;
    }
}

sub print_section_head {
    my ($state) = shift;

    my $flags = $state->{count}<<4 | $state->{nogap}<<3 | ($state->{width}-1);

    if ($option->{output} eq 'h') {
        printf("/* count=%i, nogap=%i, width=%i, start=%i */\n",
            $state->{count},
            $state->{nogap},
            $state->{width},
            $state->{charid_start},
        );
        printf("\t0x%02x, 0x%02x,\n",
            $flags,
            $state->{charid_start},
        );
    }
    if ($option->{output} eq 'hex') {
        printf("%02x%02x",$flags,$state->{charid_start});
    }
}

sub print_char_data {
    my $data = shift;

    if ($option->{output} eq 'h') {
        for my $this_data (@{$data}) {
            printf("/* '%c' */\n",$this_data->{charid});
            for my $coldata (@{$this_data->{cols}}) {
                printf("\t0b%s,\n",$coldata);
            }
        }
        printf("\n\n");
    }
    if ($option->{output} eq 'hex') {
        for my $this_data (@{$data}) {
            for my $coldata (@{$this_data->{cols}}) {
                printf("%02x",oct("0b".$coldata));
            }
        }
    }
}

sub print_final {
    if ($option->{output} eq 'h') {
        printf("/* end */\n");
        printf("0,\n");
    }
    if ($option->{output} eq 'hex') {
        printf("00\n");
    }
}

if ($option->{output} eq 'h' or $option->{output} eq 'hex') {
    $state=undef;

    # set some defaults
    $state->{charid_start} = 0;
    $state->{count} = 0;
    $state->{nogap} = 0;
    $state->{width} = 0;
    $state->{data} = '';

    # Note: we run through the loop one more time than needed, which will flush out any
    # non undef chars at the end of the array
    for my $charid (0..@{$db->{data}}) {
        my $char = $db->{data}[$charid];
        my $this_data;

        # empty chars
        if (!defined($char)) {
            $char->{width} = 0;
            $char->{nogap} = 0;
            $this_data = undef;
        } else {
            $this_data->{charid} = $charid;
            #$this_data = sprintf("/* '%c' */\n",$charid);
            for my $coldata (@{$char->{cols}}) {
                push @{$this_data->{cols}},$coldata;
                #$this_data .= sprintf("\t0b%s,\n",$coldata);
            }
        }

        # does this new char match the old run?
        if (($char->{width} == $state->{width}) && ($char->{nogap} == $state->{nogap}) && ($state->{count}<15)) {
            # append new data to the old
            $state->{count}++;
            if (defined($this_data)) {
                push @{$state->{data}},$this_data;
            }
        } else {
            # output the old data and reset
            if ($state->{data} && $state->{width}) {
                print_section_head($state);
                #printf("%s\n\n",$state->{data});
                print_char_data($state->{data});
            }

            $state = undef;
            $state->{charid_start}=$charid;
            $state->{count}=1;
            $state->{width}=$char->{width};
            $state->{nogap}=$char->{nogap};
            push @{$state->{data}},$this_data;
        }
    }

    print_final();
}

if ($option->{output} eq 'pbm') {
    printf("P1\n");
    printf("%i %i\n",16*8,16*8+16);
    for my $row (0..15) {
        for my $glyph_row (0..7) {
            for my $col (0..15) {
                my $charid = $row*16 + $col;
                my $data = $db->{data}[$charid]{rows}[$glyph_row] || '00000000';
                $data .= '0'x(8-length($data));
                print($data,' ');
            }
            print("\n");
        }
        print("\n");
        printf("%s\n",'0'x(16*8));
        print("\n");
    }
}

# Debug
if ($option->{debug}) {
    print Dumper($db);
}
